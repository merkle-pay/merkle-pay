datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

enum PaymentStatus {
  PENDING
  PROCESSED
  CONFIRMED
  FINALIZED
  EXPIRED
  FAILED
  REFUNDED
  CANCELLED
}

model Payment {
  id                 Int           @id @default(autoincrement())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  amount             Float
  token              String
  blockchain         String
  orderId            String
  status             PaymentStatus
  business_name      String        @default("")
  recipient_address  String
  payer_address      String?
  referencePublicKey String        @unique
  mpid               String        @unique
  raw                Json
  txId               String?
}

model PhantomDeepLink {
  id         Int      @id @default(autoincrement())
  publicKey  String
  privateKey String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  mpid       String
  orderId    String
  paymentId  Int
  expiresAt  DateTime
}

model Boss {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  level         Int       @default(99)
  business_name String
  blockchains   String[]  @default(["solana"])
  wallets       String[]  @default([])
  backup_email  String?
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("boss")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  boss      Boss     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  boss                  Boss      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Jwks {
  id         String   @id
  publicKey  String
  privateKey String
  createdAt  DateTime @default(now())

  @@map("jwks")
}
