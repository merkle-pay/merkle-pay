datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

enum PaymentStatus {
  PENDING
  PROCESSED
  CONFIRMED
  FINALIZED
  EXPIRED
  FAILED
  REFUNDED
  CANCELLED
}

model Payment {
  id                 Int           @id @default(autoincrement())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  amount             Float
  token              String
  blockchain         String
  orderId            String
  status             PaymentStatus
  business_name      String        @default("")
  recipient_address  String
  payer_address      String?
  referencePublicKey String        @unique
  mpid               String        @unique
  raw                Json
  txId               String?
}

model PhantomDeepLink {
  id                            Int      @id @default(autoincrement())
  publicKey                     String
  privateKey                    String
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  mpid                          String
  orderId                       String
  requestId                     String?
  paymentId                     Int
  expiresAt                     DateTime
  txId                          String?
  phantom_encryption_public_key String?
}

model Boss {
  id                Int        @id @default(autoincrement())
  username          String     @unique
  email             String     @unique
  password_hash     String
  is_email_verified Boolean    @default(false)
  avatar_image_url  String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  role              String     @default("boss")
  backup_email      String?
  first_name        String?
  last_name         String?
  tokens            Token[]    @relation("BossTokens")
  business          Business[] @relation("BossBusinesses")
}

model Business {
  id            Int      @id @default(autoincrement())
  business_name String
  blockchains   String[] @default(["solana"])
  wallets       String[] @default([])
  boss_id       Int
  boss_email    String
  boss          Boss     @relation("BossBusinesses", fields: [boss_id], references: [id])
}

model Token {
  id               Int       @id @default(autoincrement())
  boss_id          Int
  boss_email       String
  is_access_token  Boolean
  is_refresh_token Boolean
  scope            String?
  is_valid         Boolean   @default(true)
  expiresAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  boss             Boss      @relation("BossTokens", fields: [boss_id], references: [id])
}
